function! windowlayout#GetWindowLayout()
  let rv = []
  let curr = winnr()
  let prev = winnr("#")

  let corners = []

  exe prev . "wincmd w"
  exe curr . "wincmd w"
endfunction

function! windowlayout#GetCorners()
  let corners = [ 1 ]

  1wincmd w

  let end = winnr('$')

  while 1
    while 1
      let left = winnr()
      wincmd l
      let right = winnr()
      if right == left
        break
      endif
    endwhile

    while 1
      if winnr() == end
        return corners
      endif

      wincmd w

      if windowlayout#DistanceFromLeft(winnr()) == 0
        break
      endif
    endwhile

    let corners += [ winnr() ]
  endwhile
endfunction

function! windowlayout#WindowsInDirection(winnum, directionkey)
  exe a:winnum . "wincmd w"

  let i = 0

  while 1
    let num = winnr()
    exe "wincmd " . a:directionkey
    if winnr() == num
      exe a:winnum . "wincmd w"
      return i
    endif
    let i = i + 1
  endwhile
endfunction

function! windowlayout#DistanceFromLeft(winnum)
  return windowlayout#WindowsInDirection(a:winnum, 'h')
endfunction

function! windowlayout#DistanceFromLeft(winnum)
  return windowlayout#WindowsInDirection(a:winnum, 'k')
endfunction

function! windowlayout#WindowInDir(dir, winnum)
  exe a:winnum . "wincmd w"
  exe "wincmd " . a:dir
  return winnr()
endfunction

function! windowlayout#GetWindowPosition(winnum)
  let rv = [-1, -1, -1, -1] " X, Y, Width, Height

  let left  = windowlayout#WindowInDir('h', a:winnum)
  let above = windowlayout#WindowInDir('k', a:winnum)
  let right = windowlayout#WindowInDir('l', a:winnum)
  let down  = windowlayout#WindowInDir('j', a:winnum)
  exe a:winnum . "wincmd w"

  let rv[2] = winwidth('.')
  if right != a:winnum
    let rv[2] += 1 " There is another window; and we get the splitter's width.
  endif

  let rv[3] = winheight('.')
  if down != a:winnum || &ls == 2
    let rv[3] += 1 " Include the statusline or splitter in our height.
  endif

  if left == a:winnum
    " Leftmost window
    let rv[0] = 1
  else
    let leftpos = windowlayout#GetWindowPosition(left)
    let rv[0] = leftpos[0] + leftpos[2]
  endif

  if above == a:winnum
    " Topmost window
    let rv[1] = 1
  else
    let toppos = windowlayout#GetWindowPosition(above)
    let rv[1] = toppos[1] + toppos[3]
  endif

  return rv
endfunction

function! windowlayout#WindowPositions()
  let rv = []
  for i in range(1, winnr('$'))
    let rv += [ windowlayout#GetWindowPosition(i) ]
  endfor
  return rv
endfunction

function! windowlayout#WindowLines()
  let rv = []

  for i in range(1, winnr('$'))
    let rv += [ windowlayout#GetWindowPosition(i) ]
    let rv[i-1][2] += rv[i-1][0] - 1
    let rv[i-1][3] += rv[i-1][1] - 1
  endfor

  return rv
endfunction

function! s:NumCompare(i, j)
  return a:i == a:j ? 0 : a:i > a:j ? 1 : -1
endfunc

function! windowlayout#GetLayout()
  return s:GetLayoutImpl(0, windowlayout#WindowLines()) + [ winrestcmd() ]
endfunction

function! s:GetLayoutImpl(dir, winlines)
  let rv = []

  let minx = &columns + 1
  let maxx = 0
  let miny = &lines + 1
  let maxy = 0

  let xs = []
  let ys = []

  for line in a:winlines
    if line[0] < minx
      let minx = line[0]
    endif
    if line[1] < miny
      let miny = line[1]
    endif
    if line[2] > maxx
      let maxx = line[2]
    endif
    if line[3] > maxy
      let maxy = line[3]
    endif
    if index(xs, line[2]) == -1
      let xs += [ line[2] ]
    endif
    if index(ys, line[3]) == -1
      let ys += [ line[3] ]
    endif
  endfor

  call sort(xs, "s:NumCompare")
  call sort(ys, "s:NumCompare")

  if a:dir == 1
    let major = xs
    let minor = ys
    let check = maxy - miny + 1
  else
    let major = ys
    let minor = xs
    let check = maxx - minx + 1
  endif

  let blocklines = []

  for i in major
    " Find windows whose (bottom|right) edge lies on this (x|y)
    let matches = deepcopy(a:winlines)
    call filter(matches, 'v:val[3-a:dir] == i')

    let sum = 0
    for match in matches
      let sum += (match[2+a:dir] - match[a:dir] + 1)
    endfor

    if sum == check
      let blocklines += [i]
    endif
  endfor


  let blocks = []
  for i in range(len(blocklines))
    let blocks += [[]]
  endfor

  let blocklines = [ 0 ] + blocklines

  for win in a:winlines
    for i in range(len(blocklines) - 1)
      if win[3-a:dir] > blocklines[i] && win[3-a:dir] <= blocklines[i+1]
        let blocks[i] += [win]
        break
      endif
      if i == len(blocklines) - 2
        let blocks[-1] += [win]
      endif
    endfor
  endfor

  let rv = []

  for block in blocks
    if len(block) == 1
      let rv += block
    else
      let rv += [ s:GetLayoutImpl(1-a:dir, block) ]
    endif
  endfor

  return rv
endfunction

function! s:Expand(dir, layout)
  for i in range(len(a:layout))

    " Create a new window if we need one.
    if i != len(a:layout) - 1
      exe "wincmd " (a:dir == 0 ? "s" : "v")
    endif

    " Expand the things inside us.
    if type(a:layout[i][0]) == type([])
      call s:Expand(1-a:dir, a:layout[i])
    endif

    " Switch to the newly created window
    if i != len(a:layout) - 1
      exe "wincmd " (a:dir == 0 ? "j" : "l")
    endif
  endfor
endfunction

function! windowlayout#SetLayout(layout)
  sil! wincmd o

  let easave  = &ea
  let eisave  = &ei
  let sbsave  = &sb
  let sprsave = &spr
  let wmhsave = &wmh
  let wmwsave = &wmw

  set ea
  set ei=all
  set nosplitbelow
  set nosplitright
  set winminheight=0
  set winminwidth=0

  if type(a:layout[-1]) == type("")
    let resizecmd = a:layout[-1]
    let layout = a:layout[0:-2]
  else
    let resizecmd = ""
    let layout = a:layout
  endif

  call s:Expand(0, layout)

  let &ea  = easave
  let &ei  = eisave
  let &sb  = sbsave
  let &spr = sprsave
  let &wmh = wmhsave
  let &wmw = wmhsave

  echomsg resizecmd

  if resizecmd != ""
    exe resizecmd
  endif
endfunction
